spring.datasource.url=jdbc:mysql://localhost:3306/blogheaven
spring.datasource.username=root
spring.datasource.password=**********
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

server.port=9090

keycloak.realm=myrealm
# Even though Tomas said that the URL below should have "auth" added to it at the end when working with 18.0.0 version,
# it wasn't working.
keycloak.auth-server-url=http://localhost:8080/
# This property ensures that the communication between Keycloak and external clients is encrypted and secure.
keycloak.ssl-required=external
keycloak.resource=myclient
# Keycloak isn't enabled by default. So you need this property, and it's a good practice to include it even if keycloak is
# enabled through a different way.
keycloak.enabled=true
# This property is used to specify the attribute in Keycloak that should be used as the principal (username) when mapping
# the authenticated user to Spring Security's authentication object.
keycloak.principal-attribute=preferred_username
# This property is used to indicate that the client in your application is a public client.
# This triggers Keycloak to apply additional security measures suitable for public clients.
# I was just reviewing my code few hours before the submission deadline and remembered this one. My client is changed into
# a confidential one (in Keycloak) and the reason is stated in the report. I don't have enough time to change it and test
# everything again. So I'm keeping it, as it is, since everything is working fine.
keycloak.public-client=true
# This property is important. First, it specifies that our java program is a bearer-only application. Bearer-only applications
# do not initiate the authentication process itself, but rely on externally authenticated tokens to authorize access to
# their resources. In this case, Keycloak is the provider of the bearer tokens.

# For further information
# When a client logs in, it gets an access token of bearer type from Keycloak. The client then includes this token in its
# requests to the application. Then the application checks with Keycloak if the token is valid in order to proceed with
# the request. If it is, the application decode the token to extract its role.
keycloak.autodetect-bearer-only=true


